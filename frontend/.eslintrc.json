{
  "env": {
    "browser": true,
    "es6": true
  },
  "extends": [
    "airbnb",
    "airbnb/hooks",
    "airbnb-typescript",
    "plugin:@typescript-eslint/recommended",
    "plugin:react/recommended",
    "plugin:jsx-a11y/recommended",
    "plugin:@next/next/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 6,
    "sourceType": "module",
    "project": "./tsconfig.json",
    "ecmaFeatures": {
      "tsx": true
    }
  },
  "plugins": [
    "import",
    "jsx-a11y",
    "react",
    "react-hooks",
    "@typescript-eslint"
  ],
  "rules": {
    "no-await-in-loop": "off",
    "class-methods-use-this": "off",
    "@typescript-eslint/no-redeclare": "off",
    "no-console": "error",
    "react/require-default-props": "off",
    "@typescript-eslint/no-explicit-any": "error",
    "react/prop-types": "off",
    // If you're using TypeScript, prop-types are not needed
    "@typescript-eslint/explicit-module-boundary-types": "off",
    // Allows you to skip explicit return types in TypeScript
    "react/jsx-filename-extension": [
      1,
      {
        "extensions": [
          ".tsx"
        ]
      }
    ],
    "import/extensions": "off",
    "no-void": "off",
    "import/no-unresolved": "off",
    // TypeScript takes care of this
    "react/react-in-jsx-scope": "off",
    // Not needed in Next.js
    "react/jsx-props-no-spreading": "off",
    // Allowing spread props
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    "import/prefer-default-export": "off",
    "jsx-a11y/label-has-associated-control": "off",
    "max-len": [
      "error",
      {
        "code": 200,
        "ignoreUrls": true,
        "ignoreStrings": true,
        "ignoreComments": true
      }
    ],
    "no-restricted-syntax": [
      "error",
      {
        "selector": "MemberExpression[property.name='defaultProps']",
        "message": "Avoid using defaultProps as they are deprecated, use defaultParams instead."
      }
    ],
    "padding-line-between-statements": [
      "error",
      // Always require blank lines after directive (like 'use-strict'), except between directives
      {
        "blankLine": "always",
        "prev": "directive",
        "next": "*"
      },
      {
        "blankLine": "any",
        "prev": "directive",
        "next": "directive"
      },
      // Always require blank lines after import, except between imports
      {
        "blankLine": "always",
        "prev": "import",
        "next": "*"
      },
      {
        "blankLine": "any",
        "prev": "import",
        "next": "import"
      },
      // Always require blank lines before and after every sequence of variable declarations and export
      {
        "blankLine": "always",
        "prev": "*",
        "next": [
          "const",
          "let",
          "var",
          "export"
        ]
      },
      {
        "blankLine": "always",
        "prev": [
          "const",
          "let",
          "var",
          "export"
        ],
        "next": "*"
      },
      {
        "blankLine": "any",
        "prev": [
          "const",
          "let",
          "var",
          "export"
        ],
        "next": [
          "const",
          "let",
          "var",
          "export"
        ]
      },
      // Always require blank lines before and after class declaration, if, do/while, switch, try
      {
        "blankLine": "always",
        "prev": "*",
        "next": [
          "if",
          "class",
          "for",
          "do",
          "while",
          "switch",
          "try"
        ]
      },
      {
        "blankLine": "always",
        "prev": [
          "if",
          "class",
          "for",
          "do",
          "while",
          "switch",
          "try"
        ],
        "next": "*"
      },
      // Always require blank lines before return statements
      {
        "blankLine": "always",
        "prev": "*",
        "next": "return"
      }
    ],
    "import/order": [
      "warn",
      {
        // All other groups (relative imports) are implicitly added as last group
        "groups": [
          [
            "builtin",
            "external"
          ],
          "internal"
        ],
        "newlines-between": "always",
        "alphabetize": {
          "order": "asc"
        }
      }
    ]
  },
  "settings": {
    "import/resolver": {
      "node": {
        "extensions": [
          ".js",
          ".jsx",
          ".ts",
          ".tsx"
        ]
      }
    }
  }
}
